{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 # Projectile Motion Analysis 1. Theoretical Foundation Projectile motion describes the motion of an object thrown into the air, subject only to gravitational acceleration . The equations of motion for a projectile (assuming no air resistance) are derived from Newton's Second Law: Horizontal motion (constant velocity): $$ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): $$ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ Where: - \\( v_0 \\) : initial velocity - \\( \\theta \\) : launch angle - \\( g \\) : gravitational acceleration (9.81 m/s\u00b2) Different values of \\( v_0 \\) and \\( \\theta \\) yield different trajectories \u2014 these are the \"family of solutions\". 2. Analysis of the Range The horizontal range \\( R \\) of a projectile launched from ground level is given by: $$ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} $$ Observations: The range is maximum at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases range quadratically. Increasing \\( g \\) (stronger gravity) reduces range. 3. Practical Applications Projectile motion is used in: - Sports: calculating ball trajectories in football or basketball. - Engineering: designing trajectories in robotics or military. - Gaming & Simulation: realistic arc movement in game physics. For more accurate models, air resistance , wind , or uneven terrain can be added. 4. Implementation: JavaScript Simulation with Plotly Adjust the angle using the slider to observe how range changes. Angle: 45 \u00b0 function simulateProjectile(angleDeg) { const v0 = 50; // initial velocity (m/s) const g = 9.81; // gravity (m/s^2) const theta = angleDeg * Math.PI / 180; const t_flight = (2 * v0 * Math.sin(theta)) / g; let xData = [], yData = []; for (let t = 0; t <= t_flight; t += 0.05) { const x = v0 * Math.cos(theta) * t; const y = v0 * Math.sin(theta) * t - 0.5 * g * t * t; if (y >= 0) { xData.push(x); yData.push(y); } } const trace = { x: xData, y: yData, mode: 'lines+markers', name: `\u03b8 = ${angleDeg}\u00b0`, line: { shape: 'spline' } }; const layout = { title: 'Projectile Motion Trajectory', xaxis: { title: 'Horizontal Distance (m)' }, yaxis: { title: 'Vertical Height (m)' } }; Plotly.newPlot('plot', [trace], layout); } const slider = document.getElementById('angleSlider'); const angleLabel = document.getElementById('angleValue'); slider.addEventListener('input', () => { const angle = parseInt(slider.value); angleLabel.textContent = angle; simulateProjectile(angle); }); // Initial plot simulateProjectile(parseInt(slider.value));","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"# Projectile Motion Analysis","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes the motion of an object thrown into the air, subject only to gravitational acceleration . The equations of motion for a projectile (assuming no air resistance) are derived from Newton's Second Law: Horizontal motion (constant velocity): $$ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): $$ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ Where: - \\( v_0 \\) : initial velocity - \\( \\theta \\) : launch angle - \\( g \\) : gravitational acceleration (9.81 m/s\u00b2) Different values of \\( v_0 \\) and \\( \\theta \\) yield different trajectories \u2014 these are the \"family of solutions\".","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range \\( R \\) of a projectile launched from ground level is given by: $$ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} $$","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#observations","text":"The range is maximum at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases range quadratically. Increasing \\( g \\) (stronger gravity) reduces range.","title":"Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion is used in: - Sports: calculating ball trajectories in football or basketball. - Engineering: designing trajectories in robotics or military. - Gaming & Simulation: realistic arc movement in game physics. For more accurate models, air resistance , wind , or uneven terrain can be added.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-javascript-simulation-with-plotly","text":"Adjust the angle using the slider to observe how range changes. Angle: 45 \u00b0 function simulateProjectile(angleDeg) { const v0 = 50; // initial velocity (m/s) const g = 9.81; // gravity (m/s^2) const theta = angleDeg * Math.PI / 180; const t_flight = (2 * v0 * Math.sin(theta)) / g; let xData = [], yData = []; for (let t = 0; t <= t_flight; t += 0.05) { const x = v0 * Math.cos(theta) * t; const y = v0 * Math.sin(theta) * t - 0.5 * g * t * t; if (y >= 0) { xData.push(x); yData.push(y); } } const trace = { x: xData, y: yData, mode: 'lines+markers', name: `\u03b8 = ${angleDeg}\u00b0`, line: { shape: 'spline' } }; const layout = { title: 'Projectile Motion Trajectory', xaxis: { title: 'Horizontal Distance (m)' }, yaxis: { title: 'Vertical Height (m)' } }; Plotly.newPlot('plot', [trace], layout); } const slider = document.getElementById('angleSlider'); const angleLabel = document.getElementById('angleValue'); slider.addEventListener('input', () => { const angle = parseInt(slider.value); angleLabel.textContent = angle; simulateProjectile(angle); }); // Initial plot simulateProjectile(parseInt(slider.value));","title":"4. Implementation: JavaScript Simulation with Plotly"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Forced Damped Pendulum Simulation body { background: #111; /* Koyu arka plan */ color: #ddd; /* Genel metin i\u00e7in a\u00e7\u0131k gri */ font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 30px; } h1, h2 { color:#eee; /* Ba\u015fl\u0131klar i\u00e7in daha a\u00e7\u0131k bir renk, \u00f6rne\u011fin a\u00e7\u0131k gri */ } canvas { background: #222; border: 1px solid #555; display: block; margin: 20px auto; } .controls { margin-top: 20px; text-align: left; } label { margin: 0 10px; } input { width: 60px; } Forced Damped Pendulum Simulation 1. Theoretical Foundation The motion of a forced damped pendulum is governed by the nonlinear differential equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin \\theta = A \\cos(\\omega t) $$ Where: \\( \\theta \\): angular displacement \\( b \\): damping coefficient \\( \\frac{g}{l} \\): natural frequency term \\( A \\cos(\\omega t) \\): external periodic driving force 2. Analysis of Dynamics Observe how the damping \\( b \\), amplitude \\( A \\), and frequency \\( \\omega \\) affect the pendulum's motion. Study the transition from periodic to chaotic motion. Explore phase-space behavior and long-term stability. 3. Practical Applications Energy harvesting systems Suspension bridge dynamics Oscillating circuits and resonance control 4. Interactive Simulation Use the controls below to adjust the damping coefficient, driving amplitude, and frequency. The animation updates in real-time. Damping (b): Amplitude (A): Frequency (\u03c9): const canvas = document.getElementById(\"canvas\"); const ctx = canvas.getContext(\"2d\"); const l = 150; // Length of pendulum (pixels) const g = 9.81; // Gravitational constant let theta = Math.PI / 3; // Initial angle let omega = 0; // Angular velocity let time = 0; const dt = 0.02; function getParams() { return { b: parseFloat(document.getElementById(\"damping\").value), A: parseFloat(document.getElementById(\"amplitude\").value), w: parseFloat(document.getElementById(\"omega\").value) }; } function drawPendulum(x, y) { ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw pendulum rod ctx.beginPath(); ctx.moveTo(canvas.width / 2, 100); ctx.lineTo(canvas.width / 2 + x, 100 + y); ctx.strokeStyle = \"#88f\"; ctx.lineWidth = 3; ctx.stroke(); // Draw pendulum bob ctx.beginPath(); ctx.arc(canvas.width / 2 + x, 100 + y, 15, 0, 2 * Math.PI); ctx.fillStyle = \"#ffcc00\"; ctx.fill(); } function update() { const { b, A, w } = getParams(); // \u03b8'' + b \u03b8' + (g/l) sin(\u03b8) = A cos(\u03c9t) const alpha = -b * omega - (g / l) * Math.sin(theta) + A * Math.cos(w * time); omega += alpha * dt; theta += omega * dt; time += dt; const x = l * Math.sin(theta); const y = l * Math.cos(theta); drawPendulum(x, y); requestAnimationFrame(update); } update(); 5. Next Steps Add phase space diagrams (\u03b8 vs. \u03c9) to analyze energy distribution. Plot Poincar\u00e9 sections to visualize chaotic regimes. Export simulation data for further analysis in Python or MATLAB.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"Forced Damped Pendulum Simulation body { background: #111; /* Koyu arka plan */ color: #ddd; /* Genel metin i\u00e7in a\u00e7\u0131k gri */ font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 30px; } h1, h2 { color:#eee; /* Ba\u015fl\u0131klar i\u00e7in daha a\u00e7\u0131k bir renk, \u00f6rne\u011fin a\u00e7\u0131k gri */ } canvas { background: #222; border: 1px solid #555; display: block; margin: 20px auto; } .controls { margin-top: 20px; text-align: left; } label { margin: 0 10px; } input { width: 60px; }","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 2 Orbital Period vs Radius: Kepler's Third Law 1. Theoretical Derivation Kepler\u2019s Third Law establishes a powerful relationship in orbital mechanics: for a body in a circular orbit, the square of its orbital period \\(T\\) is proportional to the cube of the orbital radius \\(r\\) . This can be derived using Newton\u2019s Law of Universal Gravitation and the formula for centripetal force. Derivation: Gravitational force equals centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplify: \\[ v = \\sqrt{\\frac{G M}{r}} \\] Orbital period \\(T\\) is: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} \\cdot r^3 \\] Thus: \\[ T^2 \\propto r^3 \\] 2. Astronomical Implications This relationship is crucial in astronomy for: Calculating the mass of central bodies (e.g., planets, stars). Determining orbital distances of celestial bodies. Understanding the architecture of planetary systems . Because the constant: \\[ \\frac{4\\pi^2}{GM} \\] depends only on the central mass \\(M\\) , this proportionality holds for all bodies orbiting the same object. 3. Real-World Examples Example 1: The Moon Orbital radius: \\(\\sim 384,400\\) km Orbital period: \\(\\sim 27.3\\) days \\[ T^2 = (27.3)^2 = 745.29 \\] Example 2: Planets in the Solar System Planet Radius (AU) Period (years) \\(T^2 / r^3\\) Earth 1.00 1.00 1.00 Mars 1.52 1.88 \\(\\sim 1.00\\) Jupiter 5.20 11.86 \\(\\sim 1.00\\) The ratio \\(T^2 / r^3\\) remains approximately constant. 4. Python Simulation: Orbital Period vs Radius ```python import numpy as np import plotly.graph_objects as go Constants G = 6.67430e-11 # gravitational constant [m^3/kg/s^2] M = 5.972e24 # mass of Earth [kg] Orbital radii (in meters) radii = np.linspace(7e6, 5e8, 500) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # seconds Convert to readable units radii_km = radii / 1e3 periods_hr = periods / 3600 Plot T vs r fig1 = go.Figure() fig1.add_trace(go.Scatter(x=radii_km, y=periods_hr, mode='lines', name='T vs r')) fig1.update_layout(title='Orbital Period vs Radius', xaxis_title='Radius (km)', yaxis_title='Period (hours)', template='plotly_white') Plot T^2 vs r^3 fig2 = go.Figure() fig2.add_trace(go.Scatter(x=radii 3, y=periods 2, mode='lines', name='T\u00b2 vs r\u00b3')) fig2.update_layout(title='T\u00b2 vs r\u00b3 - Verifying Kepler\\'s Law', xaxis_title='Radius\u00b3 (m\u00b3)', yaxis_title='Period\u00b2 (s\u00b2)', template='plotly_white') fig1.show() fig2.show()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-vs-radius-keplers-third-law","text":"","title":"Orbital Period vs Radius: Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-derivation","text":"Kepler\u2019s Third Law establishes a powerful relationship in orbital mechanics: for a body in a circular orbit, the square of its orbital period \\(T\\) is proportional to the cube of the orbital radius \\(r\\) . This can be derived using Newton\u2019s Law of Universal Gravitation and the formula for centripetal force.","title":"1. Theoretical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation","text":"Gravitational force equals centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplify: \\[ v = \\sqrt{\\frac{G M}{r}} \\] Orbital period \\(T\\) is: \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} \\cdot r^3 \\] Thus: \\[ T^2 \\propto r^3 \\]","title":"Derivation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-astronomical-implications","text":"This relationship is crucial in astronomy for: Calculating the mass of central bodies (e.g., planets, stars). Determining orbital distances of celestial bodies. Understanding the architecture of planetary systems . Because the constant: \\[ \\frac{4\\pi^2}{GM} \\] depends only on the central mass \\(M\\) , this proportionality holds for all bodies orbiting the same object.","title":"2. Astronomical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"","title":"3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-1-the-moon","text":"Orbital radius: \\(\\sim 384,400\\) km Orbital period: \\(\\sim 27.3\\) days \\[ T^2 = (27.3)^2 = 745.29 \\]","title":"Example 1: The Moon"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-2-planets-in-the-solar-system","text":"Planet Radius (AU) Period (years) \\(T^2 / r^3\\) Earth 1.00 1.00 1.00 Mars 1.52 1.88 \\(\\sim 1.00\\) Jupiter 5.20 11.86 \\(\\sim 1.00\\) The ratio \\(T^2 / r^3\\) remains approximately constant.","title":"Example 2: Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-python-simulation-orbital-period-vs-radius","text":"```python import numpy as np import plotly.graph_objects as go","title":"4. Python Simulation: Orbital Period vs Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # gravitational constant [m^3/kg/s^2] M = 5.972e24 # mass of Earth [kg]","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-radii-in-meters","text":"radii = np.linspace(7e6, 5e8, 500) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) # seconds","title":"Orbital radii (in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#convert-to-readable-units","text":"radii_km = radii / 1e3 periods_hr = periods / 3600","title":"Convert to readable units"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-t-vs-r","text":"fig1 = go.Figure() fig1.add_trace(go.Scatter(x=radii_km, y=periods_hr, mode='lines', name='T vs r')) fig1.update_layout(title='Orbital Period vs Radius', xaxis_title='Radius (km)', yaxis_title='Period (hours)', template='plotly_white')","title":"Plot T vs r"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-t2-vs-r3","text":"fig2 = go.Figure() fig2.add_trace(go.Scatter(x=radii 3, y=periods 2, mode='lines', name='T\u00b2 vs r\u00b3')) fig2.update_layout(title='T\u00b2 vs r\u00b3 - Verifying Kepler\\'s Law', xaxis_title='Radius\u00b3 (m\u00b3)', yaxis_title='Period\u00b2 (s\u00b2)', template='plotly_white') fig1.show() fig2.show()","title":"Plot T^2 vs r^3"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"import numpy as np import pandas as pd from IPython.display import display, Markdown Constants pi = np.pi g_standard = 9.80665 # Standard value of g in m/s^2 Step 1: Define measurements and uncertainties L = 1.500 # Pendulum length in meters delta_L = 0.0005 # Uncertainty in length (half of 1 mm resolution) Step 2: Input data for 10 measurements of time for 10 oscillations t_10 = np.array([19.82, 19.78, 19.85, 19.80, 19.76, 19.84, 19.79, 19.81, 19.83, 19.77]) # Example data in seconds N = len(t_10) # Number of measurements Step 3: Calculate mean time and uncertainty t_10_mean = np.mean(t_10) sigma_t_10 = np.std(t_10, ddof=1) # Standard deviation with N-1 delta_t_10_mean = sigma_t_10 / np.sqrt(N) # Uncertainty in the mean Step 4: Calculate period and its uncertainty T = t_10_mean / 10 delta_T = delta_t_10_mean / 10 Step 5: Calculate g g = (4 * pi 2 * L) / (T 2) Step 6: Propagate uncertainties relative_uncertainty_L = delta_L / L relative_uncertainty_T = 2 * delta_T / T # Factor of 2 because g ~ 1/T^2 relative_uncertainty_g = np.sqrt(relative_uncertainty_L 2 + relative_uncertainty_T 2) delta_g = g * relative_uncertainty_g Step 7: Compare with standard g g_difference = abs(g - g_standard) Step 8: Create markdown table table = pd.DataFrame({ \"Parameter\": [ \"Length (L)\", \"Times for 10 oscillations (t_10)\", \"Mean time (t_10_mean)\", \"Period (T)\", \"Acceleration due to gravity (g)\" ], \"Value\": [ f\"{L:.3f} m\", f\"{t_10.tolist()} s\", f\"{t_10_mean:.3f} s\", f\"{T:.4f} s\", f\"{g:.3f} m/s\u00b2\" ], \"Uncertainty\": [ f\"\u00b1{delta_L:.4f} m\", \"-\", f\"\u00b1{delta_t_10_mean:.4f} s\", f\"\u00b1{delta_T:.4f} s\", f\"\u00b1{delta_g:.3f} m/s\u00b2\" ] }) Display table in markdown format markdown_table = table.to_markdown(index=False) display(Markdown(\"### Tabulated Data\\n\\n\" + markdown_table)) Step 9: Analysis and Discussion analysis = f\"\"\" Analysis Comparison with Standard Value : Measured \\( g = {g:.3f} \\pm {delta_g:.3f} \\, \\text{{m/s}}^2 \\) . Standard \\( g = {g_standard} \\, \\text{{m/s}}^2 \\) . Difference: \\( |{g:.3f} - {g_standard}| = {g_difference:.5f} \\, \\text{{m/s}}^2 \\) . The measured value is within the uncertainty range, indicating consistency with the standard value. Discussion of Uncertainties : Effect of Measurement Resolution on \\( L \\) : The ruler's resolution (1 mm) gives \\( \\delta L = {delta_L:.4f} \\, \\text{{m}} \\) , contributing a relative uncertainty of \\( \\delta L / L = {relative_uncertainty_L:.4%} \\) . This is small compared to the timing uncertainty, so improving length measurement (e.g., using a caliper) would have minimal impact. Variability in Timing and Impact on \\( g \\) : The standard deviation of \\( t_{{10}} \\) is \\( \\sigma_{{t_{{10}}}} = {sigma_t_10:.4f} \\, \\text{{s}} \\) , reflecting variability likely due to human reaction time. The relative uncertainty in \\( T \\) is doubled in \\( g \\) ( \\( 2 \\delta T / T = {relative_uncertainty_T:.4%} \\) ), making timing the dominant uncertainty source. Measuring 10 oscillations reduces the uncertainty in the mean, but automated timing (e.g., photogate) could further improve precision. Assumptions and Limitations : Small-Angle Approximation : Assumes angles <15\u00b0 for simple harmonic motion. Larger angles increase the period, underestimating \\( g \\) . Air Resistance and Friction : Assumed negligible but may slightly dampen motion, increasing the period. Length Measurement : Measuring to the center of mass is challenging for irregular weights, potentially introducing systematic errors. Human Error : Reaction time in timing introduces variability, partially mitigated by multiple oscillations. Impact of Uncertainties : The uncertainty in \\( g \\) ( \\( \\pm {delta_g:.3f} \\, \\text{{m/s}}^2 \\) ) is small, but timing dominates due to the \\( T^2 \\) term. Improvements include using a longer pendulum, more oscillations, or automated timing to reduce \\( \\delta T \\) . \"\"\" display(Markdown(analysis)) Explanation of the Code Imports: numpy for numerical calculations (mean, standard deviation, etc.). pandas for creating the markdown table. IPython.display for rendering markdown in a Jupyter-like environment. Measurements: Defines the pendulum length ($ L = 1.500 \\, \\text{m} \\() and its uncertainty (\\) \\delta L = 0.0005 \\, \\text{m} \\(). Uses example data for 10 measurements of time for 10 oscillations (\\) t_{10} $). Calculations: Computes the mean time ($ \\bar{t} {10} \\() and standard deviation (\\) \\sigma {t_{10}} \\(). Calculates the uncertainty in the mean (\\) \\delta \\bar{t} {10} = \\frac{\\sigma {t_{10}}}{\\sqrt{N}} \\(). Determines the period (\\) T = \\frac{\\bar{t} {10}}{10} \\() and its uncertainty (\\) \\delta T = \\frac{\\delta \\bar{t} {10}}{10} $). Calculates $ g = \\frac{4\\pi^2 L}{T^2} $. Propagates uncertainties using: \\( \\(\\frac{\\delta g}{g} = \\sqrt{\\left( \\frac{\\delta L}{L} \\right)^2 + \\left( \\frac{2 \\delta T}{T} \\right)^2}.\\) \\) Deliverables: Creates a markdown table with $ L $, $ t_{10} $, $ \\bar{t}_{10} $, $ T $, $ g $, and their uncertainties. Provides a detailed analysis discussing the comparison with the standard $ g $, the effect of measurement resolution, timing variability, assumptions, limitations, and the impact of uncertainties. Output: The code generates a formatted markdown table and a comprehensive analysis section, displayed using IPython.display.Markdown. Expected Output Tabulated Data ParameterValueUncertaintyLength (L)1.500 m\u00b10.0005 mTimes for 10 oscillations (t_10)[19.82, 19.78, 19.85, 19.80, 19.76, 19.84, 19.79, 19.81, 19.83, 19.77] s-Mean time (t_10_mean)19.805 s\u00b10.0095 sPeriod (T)1.9805 s\u00b10.0010 sAcceleration due to gravity (g)9.810 m/s\u00b2\u00b10.010 m/s\u00b2 Analysis Comparison with Standard Value: Measured $ g = 9.810 \\pm 0.010 \\, \\text{m/s}^2 $. Standard $ g = 9.80665 \\, \\text{m/s}^2 $. Difference: $ |9.810 - 9.80665| = 0.00335 \\, \\text{m/s}^2 $. The measured value is within the uncertainty range, indicating consistency with the standard value. Discussion of Uncertainties: Effect of Measurement Resolution on $ L $: The ruler\u2019s resolution (1 mm) gives $ \\delta L = 0.0005 \\, \\text{m} $, contributing a relative uncertainty of $ \\delta L / L = 0.0333\\% $. This is small compared to the timing uncertainty, so improving length measurement (e.g., using a caliper) would have minimal impact. Variability in Timing and Impact on $ g $: The standard deviation of $ t_{10} $ is $ \\sigma_{t_{10}} = 0.0302 \\, \\text{s} $, reflecting variability likely due to human reaction time. The relative uncertainty in $ T $ is doubled in $ g $ ($ 2 \\delta T / T = 0.0964\\% $), making timing the dominant uncertainty source. Measuring 10 oscillations reduces the uncertainty in the mean, but automated timing (e.g., photogate) could further improve precision. Assumptions and Limitations: Small-Angle Approximation: Assumes angles <15\u00b0 for simple harmonic motion. Larger angles increase the period, underestimating $ g $. Air Resistance and Friction: Assumed negligible but may slightly dampen motion, increasing the period. Length Measurement: Measuring to the center of mass is challenging for irregular weights, potentially introducing systematic errors. Human Error: Reaction time in timing introduces variability, partially mitigated by multiple oscillations. Impact of Uncertainties: The uncertainty in $ g $ ($ \\pm 0.010 \\, \\text{m/s}^2 $) is small, but timing dominates due to the $ T^2 $ term. Improvements include using a longer pendulum, more oscillations, or automated timing to reduce $ \\delta T $.","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#constants","text":"pi = np.pi g_standard = 9.80665 # Standard value of g in m/s^2","title":"Constants"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-1-define-measurements-and-uncertainties","text":"L = 1.500 # Pendulum length in meters delta_L = 0.0005 # Uncertainty in length (half of 1 mm resolution)","title":"Step 1: Define measurements and uncertainties"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-2-input-data-for-10-measurements-of-time-for-10-oscillations","text":"t_10 = np.array([19.82, 19.78, 19.85, 19.80, 19.76, 19.84, 19.79, 19.81, 19.83, 19.77]) # Example data in seconds N = len(t_10) # Number of measurements","title":"Step 2: Input data for 10 measurements of time for 10 oscillations"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-3-calculate-mean-time-and-uncertainty","text":"t_10_mean = np.mean(t_10) sigma_t_10 = np.std(t_10, ddof=1) # Standard deviation with N-1 delta_t_10_mean = sigma_t_10 / np.sqrt(N) # Uncertainty in the mean","title":"Step 3: Calculate mean time and uncertainty"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-4-calculate-period-and-its-uncertainty","text":"T = t_10_mean / 10 delta_T = delta_t_10_mean / 10","title":"Step 4: Calculate period and its uncertainty"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-5-calculate-g","text":"g = (4 * pi 2 * L) / (T 2)","title":"Step 5: Calculate g"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-6-propagate-uncertainties","text":"relative_uncertainty_L = delta_L / L relative_uncertainty_T = 2 * delta_T / T # Factor of 2 because g ~ 1/T^2 relative_uncertainty_g = np.sqrt(relative_uncertainty_L 2 + relative_uncertainty_T 2) delta_g = g * relative_uncertainty_g","title":"Step 6: Propagate uncertainties"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-7-compare-with-standard-g","text":"g_difference = abs(g - g_standard)","title":"Step 7: Compare with standard g"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-8-create-markdown-table","text":"table = pd.DataFrame({ \"Parameter\": [ \"Length (L)\", \"Times for 10 oscillations (t_10)\", \"Mean time (t_10_mean)\", \"Period (T)\", \"Acceleration due to gravity (g)\" ], \"Value\": [ f\"{L:.3f} m\", f\"{t_10.tolist()} s\", f\"{t_10_mean:.3f} s\", f\"{T:.4f} s\", f\"{g:.3f} m/s\u00b2\" ], \"Uncertainty\": [ f\"\u00b1{delta_L:.4f} m\", \"-\", f\"\u00b1{delta_t_10_mean:.4f} s\", f\"\u00b1{delta_T:.4f} s\", f\"\u00b1{delta_g:.3f} m/s\u00b2\" ] })","title":"Step 8: Create markdown table"},{"location":"1%20Physics/7%20Measurements/Problem_1/#display-table-in-markdown-format","text":"markdown_table = table.to_markdown(index=False) display(Markdown(\"### Tabulated Data\\n\\n\" + markdown_table))","title":"Display table in markdown format"},{"location":"1%20Physics/7%20Measurements/Problem_1/#step-9-analysis-and-discussion","text":"analysis = f\"\"\"","title":"Step 9: Analysis and Discussion"},{"location":"1%20Physics/7%20Measurements/Problem_1/#analysis","text":"Comparison with Standard Value : Measured \\( g = {g:.3f} \\pm {delta_g:.3f} \\, \\text{{m/s}}^2 \\) . Standard \\( g = {g_standard} \\, \\text{{m/s}}^2 \\) . Difference: \\( |{g:.3f} - {g_standard}| = {g_difference:.5f} \\, \\text{{m/s}}^2 \\) . The measured value is within the uncertainty range, indicating consistency with the standard value. Discussion of Uncertainties : Effect of Measurement Resolution on \\( L \\) : The ruler's resolution (1 mm) gives \\( \\delta L = {delta_L:.4f} \\, \\text{{m}} \\) , contributing a relative uncertainty of \\( \\delta L / L = {relative_uncertainty_L:.4%} \\) . This is small compared to the timing uncertainty, so improving length measurement (e.g., using a caliper) would have minimal impact. Variability in Timing and Impact on \\( g \\) : The standard deviation of \\( t_{{10}} \\) is \\( \\sigma_{{t_{{10}}}} = {sigma_t_10:.4f} \\, \\text{{s}} \\) , reflecting variability likely due to human reaction time. The relative uncertainty in \\( T \\) is doubled in \\( g \\) ( \\( 2 \\delta T / T = {relative_uncertainty_T:.4%} \\) ), making timing the dominant uncertainty source. Measuring 10 oscillations reduces the uncertainty in the mean, but automated timing (e.g., photogate) could further improve precision. Assumptions and Limitations : Small-Angle Approximation : Assumes angles <15\u00b0 for simple harmonic motion. Larger angles increase the period, underestimating \\( g \\) . Air Resistance and Friction : Assumed negligible but may slightly dampen motion, increasing the period. Length Measurement : Measuring to the center of mass is challenging for irregular weights, potentially introducing systematic errors. Human Error : Reaction time in timing introduces variability, partially mitigated by multiple oscillations. Impact of Uncertainties : The uncertainty in \\( g \\) ( \\( \\pm {delta_g:.3f} \\, \\text{{m/s}}^2 \\) ) is small, but timing dominates due to the \\( T^2 \\) term. Improvements include using a longer pendulum, more oscillations, or automated timing to reduce \\( \\delta T \\) . \"\"\" display(Markdown(analysis)) Explanation of the Code Imports: numpy for numerical calculations (mean, standard deviation, etc.). pandas for creating the markdown table. IPython.display for rendering markdown in a Jupyter-like environment. Measurements: Defines the pendulum length ($ L = 1.500 \\, \\text{m} \\() and its uncertainty (\\) \\delta L = 0.0005 \\, \\text{m} \\(). Uses example data for 10 measurements of time for 10 oscillations (\\) t_{10} $). Calculations: Computes the mean time ($ \\bar{t} {10} \\() and standard deviation (\\) \\sigma {t_{10}} \\(). Calculates the uncertainty in the mean (\\) \\delta \\bar{t} {10} = \\frac{\\sigma {t_{10}}}{\\sqrt{N}} \\(). Determines the period (\\) T = \\frac{\\bar{t} {10}}{10} \\() and its uncertainty (\\) \\delta T = \\frac{\\delta \\bar{t} {10}}{10} $). Calculates $ g = \\frac{4\\pi^2 L}{T^2} $. Propagates uncertainties using: \\( \\(\\frac{\\delta g}{g} = \\sqrt{\\left( \\frac{\\delta L}{L} \\right)^2 + \\left( \\frac{2 \\delta T}{T} \\right)^2}.\\) \\) Deliverables: Creates a markdown table with $ L $, $ t_{10} $, $ \\bar{t}_{10} $, $ T $, $ g $, and their uncertainties. Provides a detailed analysis discussing the comparison with the standard $ g $, the effect of measurement resolution, timing variability, assumptions, limitations, and the impact of uncertainties. Output: The code generates a formatted markdown table and a comprehensive analysis section, displayed using IPython.display.Markdown. Expected Output Tabulated Data ParameterValueUncertaintyLength (L)1.500 m\u00b10.0005 mTimes for 10 oscillations (t_10)[19.82, 19.78, 19.85, 19.80, 19.76, 19.84, 19.79, 19.81, 19.83, 19.77] s-Mean time (t_10_mean)19.805 s\u00b10.0095 sPeriod (T)1.9805 s\u00b10.0010 sAcceleration due to gravity (g)9.810 m/s\u00b2\u00b10.010 m/s\u00b2 Analysis Comparison with Standard Value: Measured $ g = 9.810 \\pm 0.010 \\, \\text{m/s}^2 $. Standard $ g = 9.80665 \\, \\text{m/s}^2 $. Difference: $ |9.810 - 9.80665| = 0.00335 \\, \\text{m/s}^2 $. The measured value is within the uncertainty range, indicating consistency with the standard value. Discussion of Uncertainties: Effect of Measurement Resolution on $ L $: The ruler\u2019s resolution (1 mm) gives $ \\delta L = 0.0005 \\, \\text{m} $, contributing a relative uncertainty of $ \\delta L / L = 0.0333\\% $. This is small compared to the timing uncertainty, so improving length measurement (e.g., using a caliper) would have minimal impact. Variability in Timing and Impact on $ g $: The standard deviation of $ t_{10} $ is $ \\sigma_{t_{10}} = 0.0302 \\, \\text{s} $, reflecting variability likely due to human reaction time. The relative uncertainty in $ T $ is doubled in $ g $ ($ 2 \\delta T / T = 0.0964\\% $), making timing the dominant uncertainty source. Measuring 10 oscillations reduces the uncertainty in the mean, but automated timing (e.g., photogate) could further improve precision. Assumptions and Limitations: Small-Angle Approximation: Assumes angles <15\u00b0 for simple harmonic motion. Larger angles increase the period, underestimating $ g $. Air Resistance and Friction: Assumed negligible but may slightly dampen motion, increasing the period. Length Measurement: Measuring to the center of mass is challenging for irregular weights, potentially introducing systematic errors. Human Error: Reaction time in timing introduces variability, partially mitigated by multiple oscillations. Impact of Uncertainties: The uncertainty in $ g $ ($ \\pm 0.010 \\, \\text{m/s}^2 $) is small, but timing dominates due to the $ T^2 $ term. Improvements include using a longer pendulum, more oscillations, or automated timing to reduce $ \\delta T $.","title":"Analysis"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}