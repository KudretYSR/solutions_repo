{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 # Projectile Motion Analysis 1. Theoretical Foundation Projectile motion describes the motion of an object thrown into the air, subject only to gravitational acceleration . The equations of motion for a projectile (assuming no air resistance) are derived from Newton's Second Law: Horizontal motion (constant velocity): $$ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): $$ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ Where: - \\( v_0 \\) : initial velocity - \\( \\theta \\) : launch angle - \\( g \\) : gravitational acceleration (9.81 m/s\u00b2) Different values of \\( v_0 \\) and \\( \\theta \\) yield different trajectories \u2014 these are the \"family of solutions\". 2. Analysis of the Range The horizontal range \\( R \\) of a projectile launched from ground level is given by: $$ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} $$ Observations: The range is maximum at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases range quadratically. Increasing \\( g \\) (stronger gravity) reduces range. 3. Practical Applications Projectile motion is used in: - Sports: calculating ball trajectories in football or basketball. - Engineering: designing trajectories in robotics or military. - Gaming & Simulation: realistic arc movement in game physics. For more accurate models, air resistance , wind , or uneven terrain can be added. 4. Implementation: JavaScript Simulation with Plotly Adjust the angle using the slider to observe how range changes. Angle: 45 \u00b0 function simulateProjectile(angleDeg) { const v0 = 50; // initial velocity (m/s) const g = 9.81; // gravity (m/s^2) const theta = angleDeg * Math.PI / 180; const t_flight = (2 * v0 * Math.sin(theta)) / g; let xData = [], yData = []; for (let t = 0; t <= t_flight; t += 0.05) { const x = v0 * Math.cos(theta) * t; const y = v0 * Math.sin(theta) * t - 0.5 * g * t * t; if (y >= 0) { xData.push(x); yData.push(y); } } const trace = { x: xData, y: yData, mode: 'lines+markers', name: `\u03b8 = ${angleDeg}\u00b0`, line: { shape: 'spline' } }; const layout = { title: 'Projectile Motion Trajectory', xaxis: { title: 'Horizontal Distance (m)' }, yaxis: { title: 'Vertical Height (m)' } }; Plotly.newPlot('plot', [trace], layout); } const slider = document.getElementById('angleSlider'); const angleLabel = document.getElementById('angleValue'); slider.addEventListener('input', () => { const angle = parseInt(slider.value); angleLabel.textContent = angle; simulateProjectile(angle); }); // Initial plot simulateProjectile(parseInt(slider.value));","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"# Projectile Motion Analysis","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes the motion of an object thrown into the air, subject only to gravitational acceleration . The equations of motion for a projectile (assuming no air resistance) are derived from Newton's Second Law: Horizontal motion (constant velocity): $$ x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t $$ Vertical motion (accelerated motion): $$ y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 $$ Where: - \\( v_0 \\) : initial velocity - \\( \\theta \\) : launch angle - \\( g \\) : gravitational acceleration (9.81 m/s\u00b2) Different values of \\( v_0 \\) and \\( \\theta \\) yield different trajectories \u2014 these are the \"family of solutions\".","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range \\( R \\) of a projectile launched from ground level is given by: $$ R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g} $$","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#observations","text":"The range is maximum at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases range quadratically. Increasing \\( g \\) (stronger gravity) reduces range.","title":"Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Projectile motion is used in: - Sports: calculating ball trajectories in football or basketball. - Engineering: designing trajectories in robotics or military. - Gaming & Simulation: realistic arc movement in game physics. For more accurate models, air resistance , wind , or uneven terrain can be added.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-javascript-simulation-with-plotly","text":"Adjust the angle using the slider to observe how range changes. Angle: 45 \u00b0 function simulateProjectile(angleDeg) { const v0 = 50; // initial velocity (m/s) const g = 9.81; // gravity (m/s^2) const theta = angleDeg * Math.PI / 180; const t_flight = (2 * v0 * Math.sin(theta)) / g; let xData = [], yData = []; for (let t = 0; t <= t_flight; t += 0.05) { const x = v0 * Math.cos(theta) * t; const y = v0 * Math.sin(theta) * t - 0.5 * g * t * t; if (y >= 0) { xData.push(x); yData.push(y); } } const trace = { x: xData, y: yData, mode: 'lines+markers', name: `\u03b8 = ${angleDeg}\u00b0`, line: { shape: 'spline' } }; const layout = { title: 'Projectile Motion Trajectory', xaxis: { title: 'Horizontal Distance (m)' }, yaxis: { title: 'Vertical Height (m)' } }; Plotly.newPlot('plot', [trace], layout); } const slider = document.getElementById('angleSlider'); const angleLabel = document.getElementById('angleValue'); slider.addEventListener('input', () => { const angle = parseInt(slider.value); angleLabel.textContent = angle; simulateProjectile(angle); }); // Initial plot simulateProjectile(parseInt(slider.value));","title":"4. Implementation: JavaScript Simulation with Plotly"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Forced Damped Pendulum Simulation body { background: #111; /* Koyu arka plan */ color: #ddd; /* Genel metin i\u00e7in a\u00e7\u0131k gri */ font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 30px; } h1, h2 { color:#eee; /* Ba\u015fl\u0131klar i\u00e7in daha a\u00e7\u0131k bir renk, \u00f6rne\u011fin a\u00e7\u0131k gri */ } canvas { background: #222; border: 1px solid #555; display: block; margin: 20px auto; } .controls { margin-top: 20px; text-align: left; } label { margin: 0 10px; } input { width: 60px; } Forced Damped Pendulum Simulation 1. Theoretical Foundation The motion of a forced damped pendulum is governed by the nonlinear differential equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin \\theta = A \\cos(\\omega t) $$ Where: \\( \\theta \\): angular displacement \\( b \\): damping coefficient \\( \\frac{g}{l} \\): natural frequency term \\( A \\cos(\\omega t) \\): external periodic driving force 2. Analysis of Dynamics Observe how the damping \\( b \\), amplitude \\( A \\), and frequency \\( \\omega \\) affect the pendulum's motion. Study the transition from periodic to chaotic motion. Explore phase-space behavior and long-term stability. 3. Practical Applications Energy harvesting systems Suspension bridge dynamics Oscillating circuits and resonance control 4. Interactive Simulation Use the controls below to adjust the damping coefficient, driving amplitude, and frequency. The animation updates in real-time. Damping (b): Amplitude (A): Frequency (\u03c9): const canvas = document.getElementById(\"canvas\"); const ctx = canvas.getContext(\"2d\"); const l = 150; // Length of pendulum (pixels) const g = 9.81; // Gravitational constant let theta = Math.PI / 3; // Initial angle let omega = 0; // Angular velocity let time = 0; const dt = 0.02; function getParams() { return { b: parseFloat(document.getElementById(\"damping\").value), A: parseFloat(document.getElementById(\"amplitude\").value), w: parseFloat(document.getElementById(\"omega\").value) }; } function drawPendulum(x, y) { ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw pendulum rod ctx.beginPath(); ctx.moveTo(canvas.width / 2, 100); ctx.lineTo(canvas.width / 2 + x, 100 + y); ctx.strokeStyle = \"#88f\"; ctx.lineWidth = 3; ctx.stroke(); // Draw pendulum bob ctx.beginPath(); ctx.arc(canvas.width / 2 + x, 100 + y, 15, 0, 2 * Math.PI); ctx.fillStyle = \"#ffcc00\"; ctx.fill(); } function update() { const { b, A, w } = getParams(); // \u03b8'' + b \u03b8' + (g/l) sin(\u03b8) = A cos(\u03c9t) const alpha = -b * omega - (g / l) * Math.sin(theta) + A * Math.cos(w * time); omega += alpha * dt; theta += omega * dt; time += dt; const x = l * Math.sin(theta); const y = l * Math.cos(theta); drawPendulum(x, y); requestAnimationFrame(update); } update(); 5. Next Steps Add phase space diagrams (\u03b8 vs. \u03c9) to analyze energy distribution. Plot Poincar\u00e9 sections to visualize chaotic regimes. Export simulation data for further analysis in Python or MATLAB.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"Forced Damped Pendulum Simulation body { background: #111; /* Koyu arka plan */ color: #ddd; /* Genel metin i\u00e7in a\u00e7\u0131k gri */ font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 30px; } h1, h2 { color:#eee; /* Ba\u015fl\u0131klar i\u00e7in daha a\u00e7\u0131k bir renk, \u00f6rne\u011fin a\u00e7\u0131k gri */ } canvas { background: #222; border: 1px solid #555; display: block; margin: 20px auto; } .controls { margin-top: 20px; text-align: left; } label { margin: 0 10px; } input { width: 60px; }","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"\ud83e\ude90 Kepler\u2019s Third Law and Circular Orbits 1. \ud83d\udcd0 Derivation of the Period-Radius Relationship For an object of mass \ud835\udc5a m orbiting a much larger mass \ud835\udc40 M (e.g., a satellite orbiting a planet), Newton\u2019s law of gravitation and centripetal force gives: \ud835\udc39 gravity = \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 , \ud835\udc39 centripetal = \ud835\udc5a \ud835\udc63 2 \ud835\udc5f F gravity \u200b = r 2 GMm \u200b ,F centripetal \u200b = r mv 2 \u200b Setting \ud835\udc39 gravity = \ud835\udc39 centripetal F gravity \u200b =F centripetal \u200b : \ud835\udc3a \ud835\udc40 \ud835\udc5a \ud835\udc5f 2 = \ud835\udc5a \ud835\udc63 2 \ud835\udc5f \u21d2 \ud835\udc63 2 = \ud835\udc3a \ud835\udc40 \ud835\udc5f r 2 GMm \u200b = r mv 2 \u200b \u21d2v 2 = r GM \u200b The orbital period \ud835\udc47 T is the time to complete one orbit: \ud835\udc47 2 \ud835\udf0b \ud835\udc5f \ud835\udc63 \u21d2 \ud835\udc47 = 2 \ud835\udf0b \ud835\udc5f \u22c5 1 \ud835\udc3a \ud835\udc40 \ud835\udc5f = 2 \ud835\udf0b \ud835\udc5f 3 \ud835\udc3a \ud835\udc40 T= v 2\u03c0r \u200b \u21d2T=2\u03c0r\u22c5 r GM \u200b \u200b 1 \u200b =2\u03c0 GM r 3 \u200b \u200b Squaring both sides: \ud835\udc47 2 = 4 \ud835\udf0b 2 \ud835\udc3a \ud835\udc40 \u22c5 \ud835\udc5f 3 T 2 = GM 4\u03c0 2 \u200b \u22c5r 3 \ud83c\udf0c Astronomical Implications This equation implies: \ud835\udc47 2 \u221d \ud835\udc5f 3 T 2 \u221dr 3 \u2014 orbital period squared is proportional to orbital radius cubed. The constant of proportionality depends on the central mass \ud835\udc40 M. Knowing \ud835\udc47 T and \ud835\udc5f r allows astronomers to calculate the mass of a planet, star, or galaxy. Applications: Finding masses of planets from moon orbits. Estimating orbital distances from observed periods. Confirming the validity of Newtonian mechanics in celestial dynamics. \ud83c\udf0d Real-World Examples Example 1: The Moon Around Earth \ud835\udc5f \u2248 3.84 \u00d7 10 8 r\u22483.84\u00d710 8 m \ud835\udc47 \u2248 27.3 T\u224827.3 days = 2.36 \u00d7 10 6 2.36\u00d710 6 s \ud835\udc54 4 \ud835\udf0b 2 \ud835\udc5f 3 \ud835\udc47 2 \u2248 6.67 \u00d7 10 \u2212 11 \u22c5 5.97 \u00d7 10 24 g= T 2 4\u03c0 2 r 3 \u200b \u22486.67\u00d710 \u221211 \u22c55.97\u00d710 24 Result: Earth\u2019s mass verified. Example 2: Planets Around the Sun In Astronomical Units (AU) and Earth years: \ud835\udc47 2 = \ud835\udc5f 3 T 2 =r 3 This holds for all planets, showing consistency in orbital dynamics. \ud83d\udcbb Python Simulation python Kopyala D\u00fczenle import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3/kg/s^2 M_sun = 1.989e30 # kg AU = 1.496e11 # m Orbital radii from 0.1 to 30 AU radii_au = np.linspace(0.1, 30, 100) radii_m = radii_au * AU Calculate periods in seconds periods_sec = 2 * np.pi * np.sqrt(radii_m**3 / (G * M_sun)) periods_years = periods_sec / (60 * 60 * 24 * 365.25) Plot T^2 vs r^3 plt.figure(figsize=(8, 6)) plt.plot(radii_m 3, periods_sec 2, label=r' \\(T^2\\) vs \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m\u00b3)') plt.ylabel(' \\(T^2\\) (s\u00b2)') plt.title('Verification of Kepler\u2019s Third Law (Circular Orbits)') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Log-log plot plt.figure(figsize=(8, 6)) plt.loglog(radii_au, periods_years, 'o', label='Simulated Orbits') plt.xlabel('Orbital Radius (AU)') plt.ylabel('Orbital Period (years)') plt.title('Log-Log Plot: Orbital Period vs Radius') plt.grid(True, which='both') plt.legend() plt.tight_layout() plt.show() 5. \ud83d\udcc8 Graphical Results Linear plot of \ud835\udc47 2 T 2 vs \ud835\udc5f 3 r 3 confirms direct proportionality. Log-log plot has a slope \u2248 1.5, confirming power-law relationship. \ud83d\udcda Extension to Elliptical Orbits For elliptical orbits, use the semi-major axis \ud835\udc4e a: \ud835\udc47 2 = 4 \ud835\udf0b 2 \ud835\udc3a \ud835\udc40 \ud835\udc4e 3 T 2 = GM 4\u03c0 2 \u200b a 3","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#t","text":"2 \ud835\udf0b \ud835\udc5f \ud835\udc63 \u21d2 \ud835\udc47 = 2 \ud835\udf0b \ud835\udc5f \u22c5 1 \ud835\udc3a \ud835\udc40 \ud835\udc5f = 2 \ud835\udf0b \ud835\udc5f 3 \ud835\udc3a \ud835\udc40 T= v 2\u03c0r \u200b \u21d2T=2\u03c0r\u22c5 r GM \u200b \u200b 1 \u200b =2\u03c0 GM r 3 \u200b \u200b Squaring both sides: \ud835\udc47 2 = 4 \ud835\udf0b 2 \ud835\udc3a \ud835\udc40 \u22c5 \ud835\udc5f 3 T 2 = GM 4\u03c0 2 \u200b \u22c5r 3 \ud83c\udf0c Astronomical Implications This equation implies: \ud835\udc47 2 \u221d \ud835\udc5f 3 T 2 \u221dr 3 \u2014 orbital period squared is proportional to orbital radius cubed. The constant of proportionality depends on the central mass \ud835\udc40 M. Knowing \ud835\udc47 T and \ud835\udc5f r allows astronomers to calculate the mass of a planet, star, or galaxy. Applications: Finding masses of planets from moon orbits. Estimating orbital distances from observed periods. Confirming the validity of Newtonian mechanics in celestial dynamics. \ud83c\udf0d Real-World Examples Example 1: The Moon Around Earth \ud835\udc5f \u2248 3.84 \u00d7 10 8 r\u22483.84\u00d710 8 m \ud835\udc47 \u2248 27.3 T\u224827.3 days = 2.36 \u00d7 10 6 2.36\u00d710 6 s","title":"\ud835\udc47"},{"location":"1%20Physics/2%20Gravity/Problem_1/#g","text":"4 \ud835\udf0b 2 \ud835\udc5f 3 \ud835\udc47 2 \u2248 6.67 \u00d7 10 \u2212 11 \u22c5 5.97 \u00d7 10 24 g= T 2 4\u03c0 2 r 3 \u200b \u22486.67\u00d710 \u221211 \u22c55.97\u00d710 24 Result: Earth\u2019s mass verified. Example 2: Planets Around the Sun In Astronomical Units (AU) and Earth years: \ud835\udc47 2 = \ud835\udc5f 3 T 2 =r 3 This holds for all planets, showing consistency in orbital dynamics. \ud83d\udcbb Python Simulation python Kopyala D\u00fczenle import numpy as np import matplotlib.pyplot as plt","title":"\ud835\udc54"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # m^3/kg/s^2 M_sun = 1.989e30 # kg AU = 1.496e11 # m","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-radii-from-01-to-30-au","text":"radii_au = np.linspace(0.1, 30, 100) radii_m = radii_au * AU","title":"Orbital radii from 0.1 to 30 AU"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculate-periods-in-seconds","text":"periods_sec = 2 * np.pi * np.sqrt(radii_m**3 / (G * M_sun)) periods_years = periods_sec / (60 * 60 * 24 * 365.25)","title":"Calculate periods in seconds"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-t2-vs-r3","text":"plt.figure(figsize=(8, 6)) plt.plot(radii_m 3, periods_sec 2, label=r' \\(T^2\\) vs \\(r^3\\) ') plt.xlabel(' \\(r^3\\) (m\u00b3)') plt.ylabel(' \\(T^2\\) (s\u00b2)') plt.title('Verification of Kepler\u2019s Third Law (Circular Orbits)') plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plot T^2 vs r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#log-log-plot","text":"plt.figure(figsize=(8, 6)) plt.loglog(radii_au, periods_years, 'o', label='Simulated Orbits') plt.xlabel('Orbital Radius (AU)') plt.ylabel('Orbital Period (years)') plt.title('Log-Log Plot: Orbital Period vs Radius') plt.grid(True, which='both') plt.legend() plt.tight_layout() plt.show() 5. \ud83d\udcc8 Graphical Results Linear plot of \ud835\udc47 2 T 2 vs \ud835\udc5f 3 r 3 confirms direct proportionality. Log-log plot has a slope \u2248 1.5, confirming power-law relationship. \ud83d\udcda Extension to Elliptical Orbits For elliptical orbits, use the semi-major axis \ud835\udc4e a: \ud835\udc47 2 = 4 \ud835\udf0b 2 \ud835\udc3a \ud835\udc40 \ud835\udc4e 3 T 2 = GM 4\u03c0 2 \u200b a 3","title":"Log-log plot"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}